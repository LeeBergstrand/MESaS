#!/usr/bin/env Rscript
options(error = quote(dump.frames("mesas-pcoa-debug", TRUE)))

pkgTest <- function(x)
{
        if (!require(x,character.only = TRUE))
        {
                install.packages(x,dep=TRUE)
                if(!require(x,character.only = TRUE)) stop("Package not found")
        }
}

pkgTest('getopt')

#Grab arguments
#Arguments required:
#-i input OTU table (tabular format ONLY, JSON libraries much too slow in R)
#-m mapping file
#-e mapping.extra file
#-t headers.txt file
#-o output filename
#-d distance method
#-p plot ellipsoids
spec = matrix(c('input', 'i', 1, "character",
'distance','d',2,'character',
'plot_ellipsoids','p',2,'character',
'mapping','m',1,"character",
'output','o',1,"character",
'help','h',2,"character"), byrow=TRUE, ncol=4)

opt = getopt(spec)

# if help was asked for print a friendly message
# and exit with a non-zero error code
if ( !is.null(opt$help) ) {
  cat(getopt(spec, usage=TRUE))
  q(status=1)
}
if ( is.null(opt$input) ) {
  print("Input OTU table required.")
  q(status=1)
}
if ( is.null(opt$distance) ) {
	opt$distance <- "bray"
}
if ( is.null(opt$mapping) ) {
  print("Mapping file required.")
  q(status=1)
}
if ( is.null(opt$output) ) {
  opt$output <- paste("pcoa-",opt$distance,".pdf",sep="")
}

outName <- opt$output
otuTable <- opt$input
mappingFile <- opt$mapping
dmethod <- opt$distance
ellipsoidConf <- opt$plot_ellipsoids
#Make sure we have a valid distance method
dlist = c('manhattan','euclidean','canberra','bray','kulczynski','jaccard','gower','altGower','morisita','horn','mountford','raup','binomial','chao','cao')

if (! dmethod %in% dlist ) {
	print(paste("Invalid distance method:", dmethod))
	q(status=1)
} 

pkgTest("vegan")
pkgTest("ape")
if (!is.null(ellipsoidConf) ) {
	pkgTest("car")
}
#Read in and format otu table
print("Reading OTU table")

rawtable <- read.table(otuTable, skip = 1,
comment.char = "", header = TRUE, row.names = 1, sep = "\t")
otutable <- t(rawtable[1:(ncol(rawtable) - 1)])
#Sort numerically the samples
#otutable <- otutable[order(as.integer(sub("X","", rownames(otutable)))),]

print("Reading mapping");
mapping <- read.table(mappingFile, header = TRUE, comment.char = "", row.names = 1, sep = "\t", colClasses = "character")
rownames(mapping) <- gsub("-",".",rownames(mapping),fixed=TRUE)
setdiff(rownames(mapping), rownames(otutable))
print("Computing PCoA");

d <- vegdist(otutable, method=dmethod);
pdf(outName,useDingbats=F);

print("Making PCoA Plot");

p <- pcoa(d);
for (x in 1 : ncol(mapping)) {
  name <- colnames(mapping)[x]
	metadata <- factor(mapping[rownames(otutable),x])
  fac.len <- length(levels(metadata))
  if (fac.len < 2 || fac.len >= nrow(mapping)) {
    print(paste("Ignoring", name, "because all values are identical/different."))
    next
  }
	metadata_colours <- metadata
	levels(metadata_colours) <- rainbow(fac.len);
	metadata_colours<-unlist(lapply(metadata_colours, function(x) { substr(x, 0, 7); }));
	plot(p$vectors[,1:2], main = paste("PCoA ordination:", name, "\nMethod: '", dmethod, "'", sep=""), col = metadata_colours, bg = metadata_colours, pch=21);
	#If selected, plot the ellipses around the a priori clusters
	if (!is.null(ellipsoidConf) && ellipsoidConf != 0) {
		ellipse <- dataEllipse(p$vectors[,1],p$vectors[,2],groups=metadata,levels=as.numeric(ellipsoidConf),add=TRUE,plot.points=FALSE,grid=FALSE,center.pch=FALSE,col=rainbow(fac.len))
	}
	legend("bottomleft", legend = unique(metadata), pch = 21, col = unique(metadata_colours), pt.bg = unique(metadata_colours));
}

print("Making biplot");
#First, we take the mapping file and we coerce the columns to numeric
numeric_mapping <- suppressWarnings(apply(mapping,2,as.numeric))
numeric <- colSums(apply(numeric_mapping,2,is.na)) == 0
numeric_mapping <- numeric_mapping[,numeric]
rownames(numeric_mapping) <- rownames(mapping)
biplot(p, apply(numeric_mapping, 2, scale, center=TRUE, scale=TRUE))

sink(paste(dirname(outName),"/eigenvalues.txt",sep=""))
print("Eigenvalues:")
print(as.matrix(p$values$Eigenvalues))
print("Relative Eigenvalues:")
print(as.matrix(p$values$Relative_eig))
sink()
