#!/usr/bin/env python

import argparse
from collections import Counter
from hashlib import md5

def derep(in_file, out_file, length_sort, n, otu_table_path, exclude_N, hash_label):
    """ Process a fasta file into a tab-separated file. """
    out_file = open(out_file,"w")
    if otu_table_path:
        otu_table = open(otu_table_path,"w")
    with open(in_file,"r") as f:
        clist = dict()
        abundlist = dict()
        sample_names = []
        sequence = ""
        sample_id = None
        for line in f:
            if line.startswith(">"):
                #Process the last sequence
                if exclude_N:
                    if "N" not in sequence:
                        process = True
                    else:
                        process = False
                else:
                    process = True
                if (sequence is not "") and process:
                    seq_len = len(sequence)
                    if seq_len not in clist:
                        clist[seq_len] = Counter()
                        if otu_table_path:
                            abundlist[seq_len] = dict()
                    clist[seq_len][sequence]+=1
                    if otu_table_path:
                        if seqnum not in abundlist[seq_len]:
                            abundlist[seq_len][sequence] = dict()
                        if sample_id not in abundlist[seq_len][sequence]:
                            abundlist[seq_len][sequence][sample_id] = 0
                        abundlist[seq_len][sequence][sample_id] += 1
                #Start processing the next sequences
                if otu_table_path:
                    #Parse out the sample ID
                    sample_id = line.split("_")[0][1:]
                    if sample_id not in sample_names:
                        sample_names.append(sample_id)
                sequence = ""
            else:
                sequence += line.strip()
    print("Dereplication complete... writing FASTA file")
    i=0
    #Write the OTU table headers
    if otu_table_path:
        otu_table.write("#OTU ID")
        for sample_id in sample_names:
            otu_table.write("\t%s" % sample_id)
        otu_table.write("\n")
    for length, counter in iter(sorted(clist.items(),key=lambda x: x[0],reverse=True)):
        for seq, count in iter(sorted(dict(counter).items(),key=lambda x: x[1],reverse=True)):
            if (count >= n) & (seq is not "") & (seq is not None):
                    if hash_label:
                        label = md5(seq).hexdigest()
                    else:
                        label = str(i)
                    out_file.write(">%s;size=%s;\n%s\n" % (str(i), str(count), seq))
                    if otu_table_path:
                        otu_table.write(str(i))
                        for sample_id in sample_names:
                            if sample_id not in abundlist[length][seq]:
                                otu_table.write("\t0")
                            else:
                                otu_table.write("\t%s" % str(abundlist[length][seq][sample_id]))
                        otu_table.write("\n")
                    i+=1
    if otu_table_path:
        otu_table.close()
    out_file.close()
    print("Writing file complete")

if __name__=="__main__":
    parser = argparse.ArgumentParser(prog='mesas-dereplication')
    parser.add_argument("-i", metavar="input", help="Input sequence FASTA file", type=str)
    parser.add_argument("-o", metavar="output", help="Output dereplicated FASTA file", type=str)
    parser.add_argument("-l", help="Sort output FASTA file by sequence length", action='store_true')
    parser.add_argument("-n", metavar="min_abundance", help="Minimum abundance to be retained in output file", type=int,default=2)
    parser.add_argument("-t", metavar="otu_table", help="Output filepath to OTU table, if sequences belong in different samples", type=str)
    parser.add_argument("-N", help='Remove sequences with ambiguous nucleotides', action='store_true')
    parser.add_argument("-m", help="Use md5 hash as sequence label",action='store_true')
    args = parser.parse_args()
    derep(args.i, args.o, args.l, args.n, args.t, args.N, args.m)
